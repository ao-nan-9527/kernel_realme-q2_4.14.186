name: 编译mt6853机型内核

on:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3


    - name: 环境变量配置
      run: |
            echo "KERNEL_CONFIG=$(cat config.env | grep -w "KERNEL_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNEL_ZIP_NAME=$(cat config.env | grep -w "KERNEL_ZIP_NAME" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNEL_SELINUX_DEVLOP=$(cat config.env | grep -w "KERNEL_SELINUX_DEVLOP" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNEL_KSU=$(cat config.env | grep -w "KERNEL_KSU" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNEL_QD=$(cat config.env | grep -w "KERNEL_QD" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNEL_SELINUX=$(cat config.env | grep -w "KERNEL_SELINUX" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNEL_JX=$(cat config.env | grep -w "KERNEL_JX" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNEL_AVB=$(cat config.env | grep -w "KERNEL_AVB" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
    - name: 构建编译内核环境
      run: |
        sudo apt-get update
        sudo -E apt-get -y -qq install git make bc bison ccache openssl dos2unix zip kmod cpio flex libelf-dev curl libssl-dev libtfm-dev wget device-tree-compiler ca-certificates python3 python2 binutils binutils-aarch64-linux-gnu binutils-arm-linux-gnueabi
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace



    - name: 下载 Gcc编译器
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        
        mkdir gcc64
        wget -O gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
        tar -C gcc64/ -zxvf gcc-aarch64.tar.gz
    
        mkdir gcc32
        wget -O gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
        tar -C gcc32/ -zxvf gcc-arm.tar.gz
    
    - name: 下载Clang编译器
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir clang-aosp
        git clone -q --depth=1 https://github.com/crdroidandroid/android_prebuilts_clang_host_linux-x86_clang-6443078 -b 10.0 clang-aosp
    
    
    - name: 下载内核源码
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/oppo-source/Reno3-4G/tree/main/kernel-4.9 -b main android-kernel --depth=1
        cd android-kernel
        mv vendor ../
        cp -a 4.14.186/* ./



    - name: 更新 ksu
      if: env.KERNEL_KSU == 'yes'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        rm -rf KernelSU
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s ${{ env.KERNELSU_TAG }}

    - name: 关闭AVB校验
      if: env.KERNEL_AVB == 'yes'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        sed -i '/CONFIG_DM_VERITY/d' android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        sed -i '/CONFIG_DM_VERITY_FEC/d' android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        sed -i '/CONFIG_DM_VERITY_AVB/d' android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "# CONFIG_DM_VERITY is not set" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "# CONFIG_DM_VERITY_FEC is not set" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "# CONFIG_DM_VERITY_AVB is not set" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        
    - name: 关闭驱动签名
      if: env.KERNEL_QD == 'yes'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        sed -i '/CONFIG_MODULE_SIG/d' android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        sed -i '/CONFIG_MODULE_SIG_FORCE/d' android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        sed -i '/CONFIG_MODULE_SIG_ALL/d' android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        sed -i '/CONFIG_MODULE_SIG_HASH/d' android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "# CONFIG_MODULE_SIG is not set" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "# CONFIG_MODULE_SIG_FORCE is not set" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "# CONFIG_MODULE_SIG_ALL is not set" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "# CONFIG_MODULE_SIG_HASH is not set" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}


    - name: 允许设置SELINUX
      if: env.KERNEL_SELINUX == 'yes'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        sed -i '/CONFIG_SECURITY_SELINUX_BOOTPARAM/d' android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        sed -i '/CONFIG_SECURITY_SELINUX_BOOTPARAM_VALUE/d' android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        sed -i '/CONFIG_SECURITY_SELINUX_DISABLE/d' android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        sed -i '/CONFIG_SECURITY_SELINUX_DEVELOP/d' android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        sed -i '/CONFIG_SECURITY_SELINUX_AVC_STATS/d' android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "CONFIG_SECURITY_SELINUX_BOOTPARAM=y" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "CONFIG_SECURITY_SELINUX_BOOTPARAM_VALUE=1" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "CONFIG_SECURITY_SELINUX_DISABLE=y" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "CONFIG_SECURITY_SELINUX_DEVELOP=y" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "CONFIG_SECURITY_SELINUX_AVC_STATS=y" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
      
               
    - name: 设置ccache缓存
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: build-kernel-mido-kernel
        max-size: 2G

    - name: 格式转化
      if: env.MAKE_BOOT_IMAGE_IS_OK == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        find ./  -exec dos2unix {} \;
        
    - name: 开始编译内核
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        sed -i '/CONFIG_ANDROID_PARANOID_NETWORK/d' arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        echo "# CONFIG_ANDROID_PARANOID_NETWORK is not set" >> arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc64/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc32/bin:$PATH
        export KBUILD_BUILD_HOST=17
        export KBUILD_BUILD_USER=HyperPower
        make -s -j$(nproc --all) O=out ARCH=arm64 ${{ env.KERNEL_CONFIG }}
        make -j$(nproc --all) CC="ccache clang" O=out ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-android- CROSS_COMPILE_ARM32=arm-linux-androideabi- LD=ld.lld
                

    - name: 制作Anykernel3卡刷包
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/osm0sis/AnyKernel3
        sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
        sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
        sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
        cp android-kernel/out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
        rm -rf AnyKernel3/.git* AnyKernel3/README.md
        
    - name: 制作内核boot.img镜像
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/Kyuofox/AIK-Linux.git
        mv android-kernel/${{ env.KERNEL_JX }}/*.img AIK-Linux/boot.img
        AIK-Linux/unpackimg.sh
        cp android-kernel/out/arch/arm64/boot/Image.gz-dtb AIK-Linux/split_img/boot.img-zImage
        AIK-Linux/repackimg.sh
        if [ -f AIK-Linux/image-new.img ]; then
            echo "MAKE_BOOT_IMAGE_IS_OK=true" >> $GITHUB_ENV
        else
            echo "MAKE_BOOT_IMAGE_IS_OK=false" >> $GITHUB_ENV
            
        fi
    
    
    - name: 上传 Anykernel3
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.KERNEL_JX }}-卡刷包
        path: kernel_workspace/AnyKernel3/*
        
    - name: 上传 boot.img
      if: env.MAKE_BOOT_IMAGE_IS_OK == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.KERNEL_JX }}-boot.img
        path: kernel_workspace/AIK-Linux/image-new.img
        
    - name: 上传编译内核
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.KERNEL_JX }}-Image.gz-dtb
        path: kernel_workspace/android-kernel/out/arch/arm64/boot/Image.gz-dtb    
